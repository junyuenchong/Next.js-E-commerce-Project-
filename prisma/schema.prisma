// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String?
  email        String    @unique
  emailVerified DateTime?
  image        String?
  passwordHash String?
  session      Session[]
  cart         Cart?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accounts     Account[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[] // One-to-many relationship
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?
  price       Float
  imageUrl    String?
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cartItems   CartLineItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model CartLineItem {
  id        String   @id
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  title     String?
  price     Float?
  image     String?
  cartId    String
  cart      Cart     @relation(references: [id], fields: [cartId], onDelete: Cascade)
}

model Cart {
  id        String   @id
  userId    Int?     @unique
  user      User?    @relation(references: [id], fields: [userId], onDelete: Cascade)
  items     CartLineItem[]
  expiresAt DateTime
  guestCartId String? @unique // For guest carts
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}